var G_skillbar_element = {
	skills: [],
	charms: [],
	runes: [],
	petMount: [],
	misc: [],
	other: []
}
const _PlayerName = Player.Name();
let _PlayerClass = '';
const matrixSkill_ID = {
	warrior: ['0', '1', '2', '3', '8', '17', '18', '19', '20', '21', '33', '34', '39', '40', '41', '46', '50'],
	shaman: ['0', '6', '7', '8', '12', '13', '28', '30', '35', '36', '37', '39', '40', '42', '43', '47'],
	mage: ['4', '8', '14', '15', '16', '22', '23', '24', '32', '39', '40', '51', '52', '53'],
	archer: ['5', '8', '9', '10', '11', '25', '26', '27', '29', '31', '38', '39', '40', '45', '48', '49', '54']
}
document.addEventListener('keydown', async (e) => {
	if (e.code == 'KeyK') {
		setTimeout(getPresetChooses, 200);
	}
});
const getSkillPreset = async (name) => {
	const res = await Player.Class(_PlayerName);
	_PlayerClass = res.type;
	const skillPresets = JSON.parse(localStorage.getItem("scout-skillpresets"));
	const skillPresetByClass = skillPresets[_PlayerClass];
	const skillPresetByName = skillPresetByClass.filter(item => item.name == name)[0];
	const skillData = skillPresetByName.data;
	const skill_IDs = [];
	skill_IDs.push(matrixSkill_ID[_PlayerClass][0])
	for (let i = 1, size = skillData.length; i < size; i++) {
		if (skillData[i] != 0) skill_IDs.push(matrixSkill_ID[_PlayerClass][i]);
	}
	return skill_IDs;
}

const setCurrentSkillName = async (name) => {
	const res = await Player.Class(_PlayerName);
	_PlayerClass = res.type;
	let CurrentSkillName = getCurrentSkillName();
	if (CurrentSkillName == null) CurrentSkillName = {};
	CurrentSkillName[_PlayerClass] = name;
	localStorage.setItem('currentSkillName', JSON.stringify(CurrentSkillName));
}
const loadSkillPreset = async (name) => {
	name = await name;
	await setCurrentSkillName(name);

	if (name == null) return;
	await loadElement();
	addStyle(name, G_skillbar_element.skills, 'skill', false);
	addStyle(name, G_skillbar_element.charms, 'charm', true);
	addStyle(name, G_skillbar_element.runes, 'rune', true);
	addStyle(name, G_skillbar_element.petMount, 'petMount', true);
	addStyle(name, G_skillbar_element.misc, 'misc', true);
	addStyle(name, G_skillbar_element.other, 'other');

}


const sliceSkill = (s) => {
	let src = s;
	const baseStr = 'https://hordes.io/assets/ui/skills/';
	src = src.replace(baseStr, "");
	const pos = src.indexOf('.');
	let val = src.slice(0, pos);
	val = val.replace('_grey', '');
	return val;
}

const getCurrentSkillName = () => {
	return JSON.parse(localStorage.getItem('currentSkillName'));
}

const getCurrentSkillNameByClass = async () => {
	const res = await Player.Class(_PlayerName);
	_PlayerClass = res.type;
	if (getCurrentSkillName() == null) setCurrentSkillName(_PlayerName);
	const CurrentSkillName = getCurrentSkillName();
	return CurrentSkillName[_PlayerClass];
}

const loadElement = async (type) => {
	let skillbar_element = {
		skills: [],
		charms: [],
		runes: [],
		petMount: [],
		misc: [],
		other: []
	}
	const skillBar = document.getElementById('skillbar');
	const skillBarChilds = skillBar.children;
	const skillIDs = await getSkillPreset(await getCurrentSkillNameByClass());
	for (var el of skillBarChilds) {
		const img_ = el.getElementsByTagName('img');
		for (var img of img_) {
			let src = img.src;
			if (src.indexOf('charm') > 0) skillbar_element['charms'].push(el);
			else if (src.indexOf('rune') > 0) skillbar_element['runes'].push(el);
			else if ((src.indexOf('pet') + src.indexOf('mount')) > 0)
				skillbar_element['petMount'].push(el);
			else if (src.indexOf('misc') > 0) skillbar_element['misc'].push(el);
			else {
				const val = sliceSkill(src);
				if (skillIDs.includes(val) || val == '40') skillbar_element['skills'].push(el);
				else skillbar_element['other'].push(el);
			}
		}
	}

	switch (type) {
		case "pet":
			G_skillbar_element.petMount = skillbar_element.petMount;
			break;
		case "skill":
			G_skillbar_element.skills = skillbar_element.skills;
			break;
		case "misc":
			G_skillbar_element.misc = skillbar_element.misc;
			break;
		case "rune":
			G_skillbar_element.runes = skillbar_element.runes;
			break;
		case "charm":
			G_skillbar_element.charms = skillbar_element.charms;
			break;
		default:
			G_skillbar_element = skillbar_element;
			break;
	}
}

const getSettings = () => {
	return JSON.parse(localStorage.getItem('skillBar_Settings'));
}

const createSettings = (presetName) => {
	let skillBar_Settings = getSettings();
	if (skillBar_Settings == null) skillBar_Settings = {};
        if(skillBar_Settings[_PlayerName] == null) skillBar_Settings[_PlayerName] = {};
	skillBar_Settings[_PlayerName][presetName] = {
		skill: {
			display: 'block'
		},
		charm: {
			top: -100,
			baseleft: 0,
			display: 'block'
		},
		rune: {
			top: -100,
			baseleft: 300,
			display: 'block'
		},
		petMount: {
			top: -200,
			baseleft: 0,
			display: 'block'
		},
		misc: {
			top: -200,
			baseleft: 100,
			display: 'block'
		},
		other: {
			display: 'none'
		},
	}
	localStorage.setItem('skillBar_Settings', JSON.stringify(skillBar_Settings));
}

// type : ['skill', 'charm', 'rune', 'pet', 'misc', 'other']
const addStyle = (name, arr, type, flg) => {
	let settings = getSettings();
	if (settings == null || settings[_PlayerName][name] == null) {
		createSettings(name);
		settings = getSettings();
	}
	const settingsByType = settings[_PlayerName][name][type];
	for (var i = 0, size = arr.length; i < size; i++)
		styleElement(arr[i], settingsByType.top, i + 1, settingsByType.baseleft, settingsByType.display, flg);
}
const styleElement = (el, top, size, baseleft, display, flg) => {
	if (flg == true) {
		el.style.position = 'absolute';
		el.style.border = '1px solid';
		el.style.margin = '1px';
	}
	if (top !== null) el.style.top = `${top}%`;
	if (top !== null) el.style.left = `${baseleft + 40*(size -1) + 2*(size -1)}px`;
	el.style.display = display;
}
const getPresetChooses = async () => {
	document.querySelectorAll('.presetbox').forEach(el => {
		const skillPresetName = el.children[1].innerText;
		const enable = el.children[2].children[0];
		enable.addEventListener('click', (e) => loadSkillPreset(`${skillPresetName}`));
	})
}
const currentSkillSetting = async () => {
	const res = await Player.Class(_PlayerName);
	_PlayerClass = res.type;
	const currentSkillNameStorage = JSON.parse(localStorage.getItem("currentSkillName"));
	if (currentSkillNameStorage == null) return null;
	return currentSkillNameStorage[_PlayerClass];
}
loadSkillPreset(currentSkillSetting())
const add_ResetSkillBtn = () => {
	const btn = document.getElementsByClassName('btnbar')[0];
	const html = `<div id="resetskillbar" class="btn border black" style="width: 16px;text-align: center;">R</div>`;
	UI.Append(btn, html);
	const r = document.getElementById('resetskillbar');
	r.addEventListener('click', (e) => {
		const skillbar = document.getElementById('skillbar');
		for (var i of skillbar.children) {
			i.style = 'none';
			i.style.display = 'block';
		}
		skillbar.style.gridTemplateColumns = `repeat(15, auto)`;
		localStorage.removeItem("currentSkillName");
	});
}
add_ResetSkillBtn();
